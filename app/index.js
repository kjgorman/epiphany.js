// Generated by CoffeeScript 1.3.3
var app, assets, express, gdata, http, idNickPairForClient, io, onlineData, port, srvr, studentsOnline, stylus;

express = require('express');

stylus = require('stylus');

assets = require('connect-assets');

http = require('http');

app = express();

app.use(assets());

app.use(express["static"](process.cwd() + '/public'));

app.set('view engine', 'jade');

app.get('/', function(req, resp) {
  return resp.render('index');
});

app.get('/student', function(req, resp) {
  return resp.render('student');
});

app.get('/teacher', function(req, resp) {
  return resp.render('teacher');
});

port = process.env.PORT || process.env.VMC_APP_PORT || 3000;

srvr = http.createServer(app);

io = (require('socket.io')).listen(srvr);

srvr.listen(port);

console.log("Listening on " + port + "\nPress CTRL-C to stop server.");

studentsOnline = function() {
  return io.of('/student').clients();
};

idNickPairForClient = function(client) {
  var pair;
  pair = {};
  pair.id = client.id;
  pair.nick = client.store.data.nick;
  return pair;
};

onlineData = function() {
  var client, nickPairs, sClients, _i, _len;
  sClients = studentsOnline();
  nickPairs = [];
  for (_i = 0, _len = sClients.length; _i < _len; _i++) {
    client = sClients[_i];
    nickPairs.push(idNickPairForClient(client));
  }
  console.log(nickPairs);
  return {
    clients: sClients.length,
    idNickPairs: nickPairs
  };
};

gdata = {
  clients: 0
};

io.sockets.manager.settings.blacklist = [];

io.of('/student').on('connection', function(socket) {
  var online_data;
  online_data = onlineData();
  gdata.clients = online_data.clients;
  socket.emit('online', online_data);
  socket.broadcast.emit('online', online_data);
  io.of('/teacher').emit('render', online_data);
  socket.set('id', studentsOnline().length + 1);
  socket.on('set name', function(name) {
    socket.set('nick', name);
    return io.of('/teacher').emit('render', onlineData());
  });
  socket.on('edit', function(data) {
    gdata.text = data.text;
    socket.broadcast.emit('edit', gdata);
    socket.emit('online', onlineData());
  });
  return socket.on('disconnect', function() {
    gdata.clients = studentsOnline();
    io.of('/student').emit('edit', onlineData());
    return io.of('/teacher').emit('render', onlineData());
  });
});

io.of('/teacher').on('connection', function(socket) {
  return socket.emit('render', onlineData());
});

io.configure(function() {
  io.set("transports", ["xhr-polling"]);
  io.set("polling duration", 10);
  return io.set("sync disconnect on unload", true);
});
